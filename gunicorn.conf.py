# Configuration Gunicorn optimis√©e pour la production et la stabilit√©
import multiprocessing
import os

# Nombre de workers (r√©duit pour √©viter la surcharge m√©moire)
workers = min(multiprocessing.cpu_count(), 4)  # Maximum 4 workers

# Type de worker (sync est plus stable pour cette application)
worker_class = 'sync'

# Port d'√©coute
bind = '0.0.0.0:5005'

# Timeouts optimis√©s
timeout = 300  # 5 minutes pour les requ√™tes longues
keepalive = 2
graceful_timeout = 60

# Nombre maximum de requ√™tes par worker avant red√©marrage (r√©duit pour √©viter les fuites m√©moire)
max_requests = 500
max_requests_jitter = 100

# Logs d√©taill√©s pour le debugging
accesslog = './logs/gunicorn_access.log'
errorlog = './logs/gunicorn_error.log'
loglevel = 'info'
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Pr√©chargement de l'application (d√©sactiv√© pour √©viter les probl√®mes de m√©moire)
preload_app = False

# Nombre de connexions simultan√©es par worker
worker_connections = 1000

# Configuration pour √©viter les fuites m√©moire
worker_tmp_dir = '/dev/shm'
max_requests_jitter = 100

# Limites de m√©moire (en bytes)
worker_memory_limit = 500 * 1024 * 1024  # 500MB par worker

# Headers de s√©curit√©
secure_scheme_headers = {
    'X-FORWARDED-PROTOCOL': 'ssl',
    'X-FORWARDED-PROTO': 'https',
    'X-FORWARDED-SSL': 'on'
}

# Configuration pour la stabilit√©
daemon = False
pidfile = './logs/gunicorn.pid'

# Callbacks pour le monitoring
def on_starting(server):
    """Appel√© au d√©marrage du serveur"""
    server.log.info("üöÄ D√©marrage du serveur Gunicorn")

def on_reload(server):
    """Appel√© lors du rechargement"""
    server.log.info("üîÑ Rechargement du serveur Gunicorn")

def worker_int(worker):
    """Appel√© quand un worker re√ßoit un signal INT"""
    worker.log.info("‚ö†Ô∏è Worker %s re√ßoit un signal INT", worker.pid)

def pre_fork(server, worker):
    """Appel√© avant la cr√©ation d'un worker"""
    server.log.info("üë∂ Cr√©ation du worker %s", worker.pid)

def post_fork(server, worker):
    """Appel√© apr√®s la cr√©ation d'un worker"""
    server.log.info("‚úÖ Worker %s cr√©√© avec succ√®s", worker.pid)

def post_worker_init(worker):
    """Appel√© apr√®s l'initialisation d'un worker"""
    worker.log.info("üéØ Worker %s initialis√©", worker.pid)

def worker_abort(worker):
    """Appel√© quand un worker crash"""
    worker.log.error("üí• Worker %s a crash√©", worker.pid)

def on_exit(server):
    """Appel√© √† la fermeture du serveur"""
    server.log.info("üõë Arr√™t du serveur Gunicorn")
