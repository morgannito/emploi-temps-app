name: 🧪 Tests Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐍 Configuration Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-html
        pip install -r requirements.txt
    
    - name: 🧪 Exécution des tests unitaires
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: 📊 Upload de la couverture vers Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: 📈 Génération du rapport HTML
      if: matrix.python-version == '3.9'
      run: |
        echo "## 📊 Rapport de Couverture" >> $GITHUB_STEP_SUMMARY
        echo "Les tests ont été exécutés avec succès !" >> $GITHUB_STEP_SUMMARY
    
    - name: 💾 Sauvegarde des artefacts
      if: matrix.python-version == '3.9'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: 📦 Installation des outils de linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: 🔍 Vérification du style avec Black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: 📏 Vérification avec Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: 🔤 Vérification des imports avec isort
      run: |
        isort --check-only --diff .
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: 📦 Installation des outils de sécurité
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: 🔒 Vérification des vulnérabilités avec Safety
      run: |
        safety check --json || true
    
    - name: 🛡️ Analyse de sécurité avec Bandit
      run: |
        bandit -r . -f json || true

  performance:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: 📦 Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark
        pip install -r requirements.txt
    
    - name: ⚡ Tests de performance
      run: |
        pytest tests/ -k "benchmark" --benchmark-only || echo "Aucun test de performance trouvé"

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐳 Configuration Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔨 Build de l'image Docker
      run: |
        docker build -t app-test .
    
    - name: 🧪 Test de l'application dans Docker
      run: |
        docker run --rm -d --name app-test-container -p 5005:5005 app-test
        sleep 10
        curl -f http://localhost:5005/student || exit 1
        docker stop app-test-container
    
    - name: 🧹 Nettoyage
      run: |
        docker rmi app-test || true 