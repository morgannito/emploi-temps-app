#!/bin/bash

# Script d'installation compl√®te pour la production
# Installe et configure Supervisor, le moniteur et les services

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Variables
APP_DIR="/home/toto/app_emploie_du_temps_isa"
SUPERVISOR_CONFIG="/etc/supervisor/conf.d/emploi_du_temps_isa.conf"
SERVICE_FILE="/etc/systemd/system/emploi-temps-monitor.service"

print_header "Installation de la solution de production"

# 1. V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "app_new.py" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire de l'application"
    exit 1
fi

# 2. Installer Supervisor si pas d√©j√† install√©
print_header "Installation de Supervisor"
if ! command -v supervisorctl &> /dev/null; then
    print_status "Installation de Supervisor..."
    sudo apt update
    sudo apt install -y supervisor
    print_status "Supervisor install√©"
else
    print_status "Supervisor d√©j√† install√©"
fi

# 3. Installer les d√©pendances Python
print_header "Installation des d√©pendances Python"
print_status "Activation de l'environnement virtuel..."
source venv/bin/activate

print_status "Installation des d√©pendances..."
pip install -r requirements.txt
pip install gevent psutil requests

# 4. Cr√©er les dossiers n√©cessaires
print_header "Cr√©ation des dossiers"
mkdir -p logs
mkdir -p data
print_status "Dossiers cr√©√©s"

# 5. Installer la configuration Supervisor
print_header "Configuration de Supervisor"
if [ -f "supervisor_emploi_temps.conf" ]; then
    print_status "Installation de la configuration Supervisor..."
    sudo cp supervisor_emploi_temps.conf "$SUPERVISOR_CONFIG"
    sudo supervisorctl reread
    sudo supervisorctl update
    print_status "Configuration Supervisor install√©e"
else
    print_error "Fichier supervisor_emploi_temps.conf non trouv√©"
    exit 1
fi

# 6. Installer le service systemd pour le moniteur
print_header "Configuration du service systemd"
if [ -f "emploi-temps-monitor.service" ]; then
    print_status "Installation du service systemd..."
    sudo cp emploi-temps-monitor.service "$SERVICE_FILE"
    sudo systemctl daemon-reload
    sudo systemctl enable emploi-temps-monitor.service
    print_status "Service systemd install√© et activ√©"
else
    print_error "Fichier emploi-temps-monitor.service non trouv√©"
    exit 1
fi

# 7. Arr√™ter les anciens processus s'ils existent
print_header "Nettoyage des anciens processus"
sudo pkill -f gunicorn || true
sudo pkill -f monitor_app.py || true
sleep 2

# 8. D√©marrer l'application
print_header "D√©marrage de l'application"
print_status "D√©marrage via Supervisor..."
sudo supervisorctl start emploi_du_temps_isa

# Attendre que l'application d√©marre
print_status "Attente du d√©marrage de l'application..."
sleep 15

# V√©rifier le statut
if sudo supervisorctl status emploi_du_temps_isa | grep -q "RUNNING"; then
    print_status "Application d√©marr√©e avec succ√®s"
else
    print_error "√âchec du d√©marrage de l'application"
    sudo supervisorctl status emploi_du_temps_isa
    exit 1
fi

# 9. D√©marrer le moniteur
print_header "D√©marrage du moniteur"
print_status "D√©marrage du service de surveillance..."
sudo systemctl start emploi-temps-monitor.service

# V√©rifier le statut du moniteur
if sudo systemctl is-active --quiet emploi-temps-monitor.service; then
    print_status "Moniteur d√©marr√© avec succ√®s"
else
    print_error "√âchec du d√©marrage du moniteur"
    sudo systemctl status emploi-temps-monitor.service
    exit 1
fi

# 10. Test final
print_header "Test de la solution"
print_status "Test de l'application..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:5005/ | grep -q "200"; then
    print_status "‚úÖ Application accessible"
else
    print_error "‚ùå Application non accessible"
    exit 1
fi

print_status "Test du moniteur..."
if sudo systemctl is-active --quiet emploi-temps-monitor.service; then
    print_status "‚úÖ Moniteur actif"
else
    print_error "‚ùå Moniteur inactif"
    exit 1
fi

# 11. Affichage des informations finales
print_header "Installation termin√©e avec succ√®s"

echo ""
echo "üéâ Votre application est maintenant configur√©e pour la production !"
echo ""
echo "üìã Informations importantes :"
echo "   ‚Ä¢ Application: http://172.19.202.13:5005"
echo "   ‚Ä¢ Logs application: $APP_DIR/logs/"
echo "   ‚Ä¢ Logs moniteur: $APP_DIR/logs/monitor.log"
echo ""
echo "üîß Commandes utiles :"
echo "   ‚Ä¢ Statut: ./manage_app_supervisor.sh status"
echo "   ‚Ä¢ Logs: ./manage_app_supervisor.sh logs"
echo "   ‚Ä¢ Red√©marrage: ./manage_app_supervisor.sh restart"
echo "   ‚Ä¢ Surveillance: ./manage_app_supervisor.sh monitor"
echo ""
echo "üõ°Ô∏è  Fonctionnalit√©s de s√©curit√© :"
echo "   ‚úÖ Red√©marrage automatique en cas de crash"
echo "   ‚úÖ Surveillance continue de la sant√©"
echo "   ‚úÖ Limitation de la m√©moire par processus"
echo "   ‚úÖ Red√©marrage automatique au boot"
echo "   ‚úÖ Logs d√©taill√©s pour le debugging"
echo ""
echo "üìä Monitoring :"
echo "   ‚Ä¢ Le moniteur v√©rifie la sant√© toutes les 60 secondes"
echo "   ‚Ä¢ Red√©marrage automatique si l'application ne r√©pond plus"
echo "   ‚Ä¢ Surveillance de l'utilisation m√©moire"
echo "   ‚Ä¢ Limitation √† 3 red√©marrages par heure maximum"
echo ""

print_status "Installation termin√©e !"
